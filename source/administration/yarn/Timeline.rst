YARN Timeline Service v.2
==========================

Краткий обзор
--------------

**YARN Timeline Service v.2** -- это следующая крупная итерация **Timeline Server** после *v.1* и *v.1.5*. Версия *v.2* создана с целью решения двух основных задач *v.1*.

Масштабируемость
^^^^^^^^^^^^^^^^^

Версия *v.1* ограничивается одним экземпляром устройства записи/чтения и хранения и не может масштабироваться далеко за пределы небольших кластеров. Версия *v.2* использует более масштабируемую распределенную архитектуру записи и масштабируемое backend-хранилище.

**YARN Timeline Service v.2** отделяет сбор (запись) данных от обслуживания (чтения) данных. Он использует распределенные коллекторы, и по существу для каждого приложения **YARN** выделяется один коллектор. Читатели -- это отдельные экземпляры, предназначенные для обслуживания запросов через REST API.

В качестве основного резервного хранилища **YARN Timeline Service v.2** выбирает СУБД **Apache HBase**, поскольку она хорошо масштабируется до большого размера, сохраняя при этом хорошее время отклика для чтения и записи.


Улучшения юзабилити
^^^^^^^^^^^^^^^^^^^^

В большинстве случаев пользователи интересуются информацией на уровне "потоков" (flows) или логических групп приложений **YARN**. Гораздо более распространенным является запуск набора или серии приложений YARN для завершения логического приложения. **Timeline Service v.2** поддерживает понятие потоков в явном виде. Кроме того, он поддерживает агрегирование метрик на flow-уровне.

К тому же, такая информация, как конфигурация и метрики, обрабатывается и поддерживается как объекты первого класса.

Диаграмма иллюстрирует взаимосвязь между различными сущностями **YARN**, моделирующими потоки (:numref:`Рис.%s.<yarn_flow_hierarchy>`).

.. _yarn_flow_hierarchy:

.. figure:: ../../imgs/administration/yarn/yarn_flow_hierarchy.png
   :align: center

   Взаимосвязь между сущностями YARN


Архитектура
^^^^^^^^^^^^^

**YARN Timeline Service v.2** использует набор коллекторов (писателей) для записи данных в backend-хранилище. Коллекторы распределяются и размещаются совместно с **Application Masters** (AM), которым они предназначены. Все данные, принадлежащие приложению, отправляются timeline-коллекторам уровня приложения, за исключением timeline-коллектора уровня **Resource Manager** (RM).

Для такого приложения **Application Master** может записывать данные в совместно расположенные timeline-коллекторы (которые являются вспомогательным сервисом **NodeManager** в этом выпуске). Кроме того, **NodeManagers** других узлов с выполняющимися контейнерами для приложения, также записывают данные в timeline-коллектор на узле, на котором выполняется **Application Master**.

**Resource Manager** тоже поддерживает свой собственный timeline-коллектор. Он генерирует только события жизненного цикла, характерные для **YARN**, чтобы поддерживать разумный объем записей.

Timeline-читатели -- это отделенные от timeline-коллекторов демоны, предназначенные для обслуживания запросов через REST API (:numref:`Рис.%s.<yarn_timeline_architecture>`).

.. _yarn_timeline_architecture:

.. figure:: ../../imgs/administration/yarn/yarn_timeline_architecture.jpg
   :align: center

   Архитектура на высоком уровне


Текущее состояние и планы на будущее
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**YARN Timeline Service v.2** в настоящее время находится в альфа-версии ("alpha 2"). Это работа в процессе, и многие вещи могут и будут быстро меняться.

Полный сквозной поток операций записи и чтения является функциональным с **Apache HBase** в качестве серверной части. При включении сервиса публикуются все общие для **YARN** события, а также системные метрики **YARN**, такие как процессор и память. Кроме того, некоторые приложения, в том числе **Distributed Shell** и **MapReduce**, могут записывать в **YARN Timeline Service v.2** данные для каждой платформы.

Основным способом доступа к данным является REST. Поэтому REST API поставляется с большим количеством полезных и гибких шаблонов запросов (`REST API`_). К тому же в настоящее время отсутствует поддержка доступа к командной строке. 

Коллекторы (писатели) в настоящее время встроены в **Node Managers** в качестве вспомогательных сервисов. **Resource Manager** также имеет свой специальный внутрипроцессный коллектор. Читатель в настоящее время является единственным экземпляром. Также в текущий период невозможно выполнить запись в **Timeline Service** вне контекста приложения **YARN** (то есть вне кластерного клиента).

Начиная с *alpha2*, **Timeline Service v.2** поддерживает простую авторизацию в виде настраиваемого белого списка пользователей и групп, которые могут читать timeline-данные. Администраторам кластера по умолчанию разрешено читать эти данные.

Отключенный **YARN Timeline Service v.2** никак не влияет на любую другую существующую функциональность.

Работа, чтобы сделать сервис действительно готовым к production-ready, продолжается. Некоторые ключевые элементы включают в себя:

+ Более надежная отказоустойчивость хранилища;
+ Поддержка внекластерных клиентов;
+ Улучшенная поддержка для долгоработающих приложений;
+ Поддержка ACL;
+ Автономное (периодическое по времени) агрегирование потоков, пользователей и очередей для отчетов и анализа;
+ Коллекторы timeline как отдельные экземпляры от Node Managers;
+ Кластеризация читателей;
+ Миграция и совместимость с v.1.


Развертывание
--------------

Конфигурация
^^^^^^^^^^^^^^

**Basic**:

``yarn.timeline-service.enabled`` -- указывает клиентам, включен ли сервис Timeline. При включенном параметре используемая приложениями библиотека *TimelineClient* публикует сущности и события на сервер Timeline. Значение по умолчанию *false*;

``yarn.timeline-service.version`` -- указывает текущую версию запущенного Timeline Service. Например, если значение параметра равно *1,5*, а ``yarn.timeline-service.enabled`` установлен на *true*, то это означает, что кластер будет и должен запускать Timeline Service версии *v.1.5*. На стороне клиента, если он использует такую же версию сервера, результат будет успешным. В случае если клиент выбирает меньшую версию, несмотря на то, насколько надежна история совместимости между версиями, результаты могут отличаться. По умолчанию значение параметра *1.0f*.

Новые параметры, введенные в версии *v.2*:

``yarn.timeline-service.writer.class`` -- класс операции записи backend-хранилища. Значение по умолчанию *HBase*;

``yarn.timeline-service.reader.class`` -- класс операции чтения backend-хранилища. Значение по умолчанию *HBase*;

``yarn.system-metrics-publisher.enabled`` -- определяет, публикуются ли системные метрики YARN в сервисе Timeline (от Resource Manager и Node Manager). Значение по умолчанию *false*;

``yarn.timeline-service.schema.prefix`` -- префикс схемы для hbase-таблиц. По умолчанию ``prod.``.

**Advanced**:

``yarn.timeline-service.hostname`` -- имя хоста веб-приложения сервиса Timeline. Значение по умолчанию *0.0.0.0*;

``yarn.timeline-service.reader.webapp.address`` -- http-адрес веб-приложения Timeline Reader. По умолчанию *${yarn.timeline-service.hostname}:8188*;

``yarn.timeline-service.reader.webapp.https.address`` -- https-адрес веб-приложения Timeline Reader. По умолчанию *${yarn.timeline-service.hostname}:8190*;

``yarn.timeline-service.reader.bind-host`` -- фактический адрес, к которому привязывается timeline-читатель. Если параметр установлен, сервер читателя связывается с этим адресом и портом, указанным в ``yarn.timeline-service.reader.webapp.address``. Наиболее полезно в целях прослушивания сервисом всех интерфейсов, задав значение параметра *0.0.0.0*.

Новые параметры, введенные в версии *v.2*:

``yarn.timeline-service.hbase.configuration.file`` -- необязательный URL-адрес файла конфигурации *hbase-site.xml*, используемый для подключения кластера timeline-service hbase. Если значение параметра пусто или не указано, конфигурация HBase загружается из *classpath*. Указанное значение параметра переопределяет *classpath*. По умолчанию установлено пустое значение;

``yarn.timeline-service.writer.flush-interval-seconds`` -- определяет частоту сброса записи timeline. Значение по умолчанию *60*;

``yarn.timeline-service.app-collector.linger-period.ms`` -- период времени, в течение которого коллектор приложений активен в Node Manager после завершения работы Application Master. Значение по умолчанию *60000* (60 секунд);

``yarn.timeline-service.timeline-client.number-of-async-entities-to-merge`` -- количество попыток клиента timeline V2 для объединения многочисленных асинхронных сущностей (если они доступны), после чего вызывает REST ATS V2 API для отправки. Значение по умолчанию *10*;

``yarn.timeline-service.hbase.coprocessor.app-final-value-retention-milliseconds`` -- определяет, как долго сохраняется финальное значение метрики завершенного приложения до объединения с суммой потока. По умолчанию *259200000* (3 дня). Значение должно быть установлено в кластере HBase;

``yarn.rm.system-metrics-publisher.emit-container-events`` -- определяет, публикуется ли метрика контейнера yarn на сервере timeline (от Resource Manager). Параметр конфигурации предназначен для ATS V2. Значение по умолчанию *false*.

**Security**:

Безопасность можно включить, установив для ``yarn.timeline-service.http-authentication.type`` значение *kerberos*, после чего станут доступны следующие параметры конфигурации:

``yarn.timeline-service.http-authentication.type`` -- определяет аутентификацию, используемую для конечной точки HTTP timeline-сервера (коллектор/читатель). Поддерживаемые значения: *simple* / *kerberos* / *#AUTHENTICATION_HANDLER_CLASSNAME#*. Значение по умолчанию *simple*;

``yarn.timeline-service.http-authentication.simple.anonymous.allowed`` -- указывает, разрешены ли анонимные запросы timeline-сервером при использовании аутентификации *simple*. По умолчанию *true*;

``yarn.timeline-service.http-authentication.kerberos.principal`` -- принципал Kerberos, используемый для конечной точки HTTP timeline-сервера (коллектор/читатель);

``yarn.timeline-service.http-authentication.kerberos.keytab`` -- keytab-файл Kerberos, используемый для конечной точки HTTP timeline-сервера (коллектор/читатель);

``yarn.timeline-service.principal`` -- принципал Kerberos для timeline-читателя. Для timeline-коллектора используется принципал Node Manager, поскольку он работает в качестве вспомогательного сервиса внутри Node Manager;

``yarn.timeline-service.keytab`` -- keytab-файл Kerberos для timeline-читателя. Для timeline-коллектора используется keytab-файл ключей Node Manager, поскольку он работает в качестве вспомогательного сервиса внутри Node Manager;

``yarn.timeline-service.delegation.key.update-interval`` -- значение по умолчанию *86400000* (1 день);

``yarn.timeline-service.delegation.token.renew-interval`` -- значение по умолчанию *86400000* (1 день);

``yarn.timeline-service.delegation.token.max-lifetime`` --  значение по умолчанию *604800000* (7 дней);

``yarn.timeline-service.read.authentication.enabled`` -- включает или отключает проверку авторизации для чтения данных timeline service v2. По умолчанию установлено *false* -- отключена;

``yarn.timeline-service.read.allowed.users`` -- разделенный запятыми список пользователей и после пробела разделенный запятыми список групп. Функция позволяет введенному списку пользователей и групп читать данные и отклонять остальных пользователей и группы. По умолчанию установлено значение *none*. Если авторизация включена, то данный параметр обязателен.

**Включение поддержки CORS**

Для включения поддержки совместного использования ресурсов (Cross-origin resource sharing, CORS) в **Timeline Service v.2** необходимо установить следующие параметры конфигурации:

+ В *yarn-site.xml* параметр ``yarn.timeline-service.http-cross-origin.enabled`` установить на *true*;

+ В *core-site.xml* добавить ``org.apache.hadoop.security.HttpCrossOriginFilterInitializer`` к ``hadoop.http.filter.initializers``.

Важно обратить внимание, что параметр ``yarn.timeline-service.http-cross-origin.enabled``, установленный на *true*, переопределяет ``hadoop.http.cross-origin.enabled``.


Включение Timeline Service v.2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Подготовка кластера **Apache HBase** к **Timeline Service v.2** заключается в выполнении нескольких шагов:

+ `Настройка кластера HBase`_;
+ `Включение сопроцессора`_;
+ `Создание схемы для Timeline Service v.2`_.


Настройка кластера HBase
~~~~~~~~~~~~~~~~~~~~~~~~~

Первый шаг заключается в настройке или выборе кластера **Apache HBase** для использования в качестве кластера хранения. Версия **Timeline Service v.2** поддерживает **Apache HBase 1.2.6**. Ранние версии **Apache HBase** (1.0.x) не работают с **Timeline Service v.2**, а более поздние не протестированы.

**HBase** имеет разные режимы развертывания. При намерении создания простого профиля для кластера **Apache HBase** со слабой загрузкой данных, но с сохранением их при входе и выходе с узла, подходит режим развертывания "Standalone HBase over HDFS".

Это полезный вариант автономной настройки **HBase**, когда все демоны **HBase** работают внутри одной JVM, и вместо того, чтобы сохраняться в локальной файловой системе, сохраняются в экземпляре **HDFS**. Для настройки данного автономного варианта необходимо отредактировать файл *hbase-site.xml*, указав ``hbase.rootdir`` на каталог в экземпляре **HDFS**, а затем установить для ``hbase.cluster.distributed`` значение *false*. Например:

::

 <configuration>
   <property>
     <name>hbase.rootdir</name>
     <value>hdfs://namenode.example.org:8020/hbase</value>
   </property>
   <property>
     <name>hbase.cluster.distributed</name>
     <value>false</value>
   </property>
 </configuration>


Включение сопроцессора
~~~~~~~~~~~~~~~~~~~~~~~~





Создание схемы для Timeline Service v.2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




Upgrade from alpha1 to alpha2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Publishing application specific data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Timeline Service v.2 REST API
-------------------------------


Root path
^^^^^^^^^^^


Query Flows
^^^^^^^^^^^^^


Query Flow Runs
^^^^^^^^^^^^^^^^


Query Flow Run
^^^^^^^^^^^^^^^^


Query Apps for a flow
^^^^^^^^^^^^^^^^^^^^^^^


Query Apps for a flow run
^^^^^^^^^^^^^^^^^^^^^^^^^^^


Query app
^^^^^^^^^^^


Query generic entities with in the scope of Application
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Query generic entities
^^^^^^^^^^^^^^^^^^^^^^^^


Query generic entity with in the scope of Application
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Query generic entity
^^^^^^^^^^^^^^^^^^^^^


Query generic entity types
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

