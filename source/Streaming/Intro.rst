Введение и основные понятия
----------------------------

**Arenadata Streaming (ADS) -- платформа распределенных потоковых операций**

Введение в Arenadata Streaming
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Arenadata Streaming (ADS)** -- платформа распределенных потоковых операций. Что именно это значит?

Платформа потоковой передачи данных имеет три ключевые возможности:

+ Публикация и подписка на потоковую передачу данных, похожую на очередь сообщений или корпоративную систему обмена сообщениями;
+ Хранение потоков записей отказоустойчивым способом;
+ Обработка потоков записей по мере их возникновения.

**ADS**, как правило, используется для двух обширных классов потребления:

+ Создание канала для потоковой передачи данных в реальном времени с целью надежного обмена данными между системами и приложениями;
+ Создание приложений для потоковой передачи данных в реальном времени с целью их преобразования и взаимодействия.

Чтобы понять, как **Arenadata Streaming** все это осуществляет, следует погрузиться и изучить возможности **ADS** снизу вверх.

Несколько концепций **Arenadata Streaming**:

+ **ADS** запускается как кластер на одном или нескольких серверах, которые могут располагаться в нескольких центрах обработки данных;
+ В кластере **ADS** потоки записей хранятся по категориям, называемым *topics* (топики);
+ Каждая запись состоит из ключа, значения и временной метки.

**ADS** имеет четыре основных **API** (`API <http://docs.arenadata.io/adh/v1.4/Streaming/API.html>`_, :numref:`Рис.%s.<ADS_intro_API>`):

+ Producer API (поставщик) позволяет приложению публиковать поток записей по одному или нескольким топикам платформы;
+ Consumer API (потребитель) позволяет приложению подписываться на один или несколько топиков и обрабатывать принадлежащие им потоки записей;
+ Streams API позволяет приложению выступать в качестве *stream processor* (потокового процессора), потребляя входной поток данных из одного или нескольких топиков и создавая выходной поток данных так же для одного или нескольких топиков, эффективно преобразуя входные потоки в выходные;
+ Connector API позволяет создавать и запускать повторное использование поставщиков и потребителей, которые связывают топики с существующими приложениями или системами данных. Например, коннектор для реляционной базы данных может записывать каждое изменение в таблицу.


.. _ADS_intro_API:

.. figure:: ../imgs/ADS_intro_API.*
   :align: center

   API на платформе ADS


В **ADS** связь между клиентами и серверами осуществляется с помощью простого, не зависящего от языка, высокопроизводительного протокола **TCP**. Протокол является версионным и поддерживает обратную совместимость с предыдущими версиями. **Arenadata** предоставляет Java-клиент для **ADS**, но при этом клиенты доступны на многих языках.


Концепция хранения
^^^^^^^^^^^^^^^^^^^

Для начала в главе описывается основная абстракция, которую **ADS** обеспечивает для потока записей -- топик.

Топики -- это категории, по которым записи публикуются в платформе. В **ADS** топики могут иметь нескольких потребителей, которые подписываются на получение находящихся в них данных. Для каждого топика платформа поддерживает секционированный журнал, схематично представленный на :numref:`Рис.%s.<ADS_intro_Topic>`

.. _ADS_intro_Topic:

.. figure:: ../imgs/ADS_intro_Topic.*
   :align: center

   Секционированный журнал 

Каждая секция представляет собой упорядоченную неизменную последовательность записей, которая постоянно добавляется в структурированный журнал. Каждой записи в секциях присваивается порядковый номер *id*, называемый смещением (*offset*), который однозначно идентифицирует каждую запись в секции.

Платформа **ADS** надежно сохраняет все опубликованные записи с настройкой периода их хранения. Например, если политика хранения установлена на два дня, то в течение двух дней после публикации запись доступна для потребления, после чего она отбрасывается с целью освобождения места. Производительность **ADS** фактически постоянна по отношению к размеру данных, поэтому хранение данных в течение длительного времени не является проблемой (:numref:`Рис.%s.<ADS_intro_offset>`).

.. _ADS_intro_offset:

.. figure:: ../imgs/ADS_intro_offset.*
   :align: center

   Логика смещения 

Фактически, метаданные, сохраненные для каждого потребителя, являются смещением или положением потребителя в журнале. Это смещение контролируется самим потребителем: обычно потребитель линейно продвигает свое смещение при считывании записи, но так как позиция контролируется потребителем, он может считывать записи в любом порядке. Например, потребитель может вернуться к более старому смещению для повторной обработки данных или перейти к самой последней записи и начать считывание с настоящего момента.

Такое сочетание функций означает, что потребители **ADS** могут приходить и уходить без особого влияния на кластер и на других потребителей. Например, можно использовать инструменты командной строки для "хвоста" содержимого любого топика без какого-либо влияния на то, что считывается другими потребителями.

Разделы в журнале служат нескольким целям. Во-первых, они позволяют журналу масштабироваться сверх размера, который помещается на одном сервере. Каждая отдельная секция располагается на серверах, но топик может иметь много разделов для возможности обработки произвольного количества данных. Во-вторых, разделы действуют как единица параллелизма.

Разделы журнала распределяются по серверам кластера **ADS**, при этом каждый сервер обрабатывает данные и запросы на долю разделов. Каждая секция реплицируется на настраиваемое число серверов для обеспечения отказоустойчивости.

Каждый раздел имеет один сервер, который действует как "лидер", и ноль или более серверов, которые действуют как "последователи". Лидер обрабатывает все запросы на чтение и запись для секции, а последователи пассивно реплицируют лидера. Если лидер выходит из строя, один из последователей автоматически становится новым лидером. Каждый сервер выступает в качестве лидера для некоторых своих разделов и последователем для других, поэтому нагрузка в кластере хорошо сбалансирована.

**ADS MirrorMaker** обеспечивает поддержку георепликации для кластеров. С помощью **MirrorMaker** сообщения реплицируются через несколько центров обработки данных или облачных сервисов. Это можно использовать в активных/пассивных сценариях резервного копирования и восстановления или в активных/активных сценариях для размещения данных ближе к пользователям или с целью поддержки требований к местоположению данных.

Поставщики публикуют данные по топикам по своему усмотрению и отвечают за выбор того, какую запись назначить для какого раздела в топике. Это может быть сделано в циклическом режиме просто для балансировки нагрузки, или это может быть сделано в соответствии с некоторой семантической функцией разбиения (например, на основе некоторого ключа в записи). 

Потребители относят себя к группе потребителей, и каждая запись, опубликованная в топике, доставляется каждому инстансу потребителя, группа которого подписана на данный топик. При этом инстансы потребителя могут находиться на отдельных процессах или на отдельных машинах. Если все инстансы потребителя имеют одну и ту же группу, то записи эффективно балансируются. А в случае если инстансы потребителя имеют разные группы, то каждая запись передается во все потребительские процессы (:numref:`Рис.%s.<ADS_intro_group>`).

.. _ADS_intro_group:

.. figure:: ../imgs/ADS_intro_group.*
   :align: center

   Группы потребителей 

На рисунке приведен пример двухсерверного кластера **ADS** с четырьмя разделами (*P0-P3*) и с двумя группами потребителей. Группа потребителей *A* имеет два экземпляра потребителей, а группа *B* -- четыре.

Чаще всего топики имеют небольшое количество групп потребителей -- по одной для каждого "логического подписчика". Каждая группа состоит из множества инстансов потребителей для обеспечения масштабируемости и отказоустойчивости. Это не что иное, как семантика публикация-подписка, где подписчик представляет собой кластер потребителей, а не один процесс.

Способ реализации потребления в **ADS** заключается в разделении секций в журнале по экземплярам потребителя, чтобы каждый экземпляр был исключительным потребителем "изрядной доли" разделов в любой момент времени. Процесс поддержания членства в группе динамически обрабатывается протоколом **ADS**. Если к группе присоединяются новые экземпляры, они принимают некоторые разделы от других членов группы; если экземпляр удаляется, его разделы распределяются по остальным экземплярам.

**ADS** предоставляет только общий порядок записей внутри раздела, а не между секциями в топике. Упорядочивание по разделам в сочетании с возможностью разбиения данных по ключам для большинства приложений является достаточным. Однако если требуется полный порядок по записям, это может быть достигнуто с помощью топика, имеющего только один раздел, хотя это будет означать только один потребительский процесс для каждой группы потребителей.

**ADS** можно развернуть как мультитенантное решение. Многопользовательский режим включается путем настройки топиков, которые могут записывать или считывать данные. Существует также операционная поддержка квот. Администраторы могут определять и применять квоты на запросы для управления ресурсами брокера, которые используются клиентами.



Гарантии
^^^^^^^^^


Рекомендации по использованию
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
