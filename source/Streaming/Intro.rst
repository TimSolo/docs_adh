Введение и основные понятия
----------------------------

**Arenadata Streaming (ADS) -- платформа распределенных потоковых операций**

Введение в Arenadata Streaming
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**Arenadata Streaming (ADS)** -- платформа распределенных потоковых операций. Что именно это значит?

Платформа потоковой передачи данных имеет три ключевые возможности:

+ Публикация и подписка на потоковую передачу данных, похожую на очередь сообщений или корпоративную систему обмена сообщениями;
+ Хранение потоков записей отказоустойчивым способом;
+ Обработка потоков записей по мере их возникновения.

**ADS**, как правило, используется для двух обширных классов потребления:

+ Создание канала для потоковой передачи данных в реальном времени с целью надежного обмена данными между системами и приложениями;
+ Создание приложений для потоковой передачи данных в реальном времени с целью их преобразования и взаимодействия.

Чтобы понять, как **Arenadata Streaming** все это осуществляет, следует погрузиться и изучить возможности **ADS** снизу вверх.

Несколько концепций **Arenadata Streaming**:

+ **ADS** запускается как кластер на одном или нескольких серверах, которые могут располагаться в нескольких центрах обработки данных;
+ В кластере **ADS** потоки записей хранятся по категориям, называемым *topics* (топики);
+ Каждая запись состоит из ключа, значения и временной метки.

**ADS** имеет четыре основных **API** (`API <http://docs.arenadata.io/adh/v1.4/Streaming/API.html>`_, :numref:`Рис.%s.<ADS_intro_API>`):

+ Producer API (поставщик) позволяет приложению публиковать поток записей по одному или нескольким топикам платформы;
+ Consumer API (потребитель) позволяет приложению подписываться на один или несколько топиков и обрабатывать принадлежащие им потоки записей;
+ Streams API позволяет приложению выступать в качестве *stream processor* (потокового процессора), потребляя входной поток данных из одного или нескольких топиков и создавая выходной поток данных так же для одного или нескольких топиков, эффективно преобразуя входные потоки в выходные;
+ Connector API позволяет создавать и запускать повторное использование поставщиков и потребителей, которые связывают топики с существующими приложениями или системами данных. Например, коннектор для реляционной базы данных может записывать каждое изменение в таблицу.


.. _ADS_intro_API:

.. figure:: ../imgs/ADS_intro_API.*
   :align: center

   API на платформе ADS


В **ADS** связь между клиентами и серверами осуществляется с помощью простого, не зависящего от языка, высокопроизводительного протокола **TCP**. Протокол является версионным и поддерживает обратную совместимость с предыдущими версиями. **Arenadata** предоставляет Java-клиент для **ADS**, но при этом клиенты доступны на многих языках.


Концепция хранения
^^^^^^^^^^^^^^^^^^^

Для начала в главе описывается основная абстракция, которую **ADS** обеспечивает для потока записей -- топик.

Топики -- это категории, по которым записи публикуются в платформе. В **ADS** топики могут иметь нескольких потребителей, которые подписываются на получение находящихся в них данных. Для каждого топика платформа поддерживает секционированный журнал (:numref:`Рис.%s.<ADS_intro_Topic>`).

.. _ADS_intro_Topic:

.. figure:: ../imgs/ADS_intro_Topic.*
   :align: center

   Секционированный журнал 

Каждая секция представляет собой упорядоченную неизменную последовательность записей, которая постоянно добавляется в структурированный журнал. Каждой записи в секциях присваивается порядковый номер *id*, называемый смещением (*offset*), который однозначно идентифицирует каждую запись в секции.

Платформа **ADS** надежно сохраняет все опубликованные записи с настройкой периода их хранения. Например, если политика хранения установлена на два дня, то в течение двух дней после публикации запись доступна для потребления, после чего она отбрасывается с целью освобождения места. Производительность **ADS** фактически постоянна по отношению к размеру данных, поэтому хранение данных в течение длительного времени не является проблемой (:numref:`Рис.%s.<ADS_intro_Topic>`).

.. _ADS_intro_Topic:

.. figure:: ../imgs/ADS_intro_Topic.*
   :align: center

   Секционированный журнал 

Фактически, метаданные, сохраненными для каждого потребителя, является смещение или положение этого потребителя в журнале. Это смещение контролируется потребителем: обычно потребитель будет линейно перемещать свое смещение, когда он считывает записи, но на самом деле, поскольку позиция контролируется потребителем, он может потреблять записи в любом порядке, который ему нравится. Например, потребитель может сбросить до более старого значения смещения для обработки данных из прошлого или пропустить вперед до самой последней записи и начать потреблять с «сейчас».

Фактически, единственными метаданными, сохраняемыми для каждого потребителя, являются смещение или положение этого потребителя в журнале. Это смещение контролируется потребителем: обычно потребитель продвигает свое смещение линейно, когда он читает записи, но, на самом деле, поскольку позиция контролируется потребителем, он может потреблять записи в любом порядке, который ему нравится. Например, потребитель может вернуться к более старому смещению для повторной обработки данных из прошлого или перейти к самой последней записи и начать потреблять с "сейчас".

In fact, the only metadata retained on a per-consumer basis is the offset or position of that consumer in the log. This offset is controlled by the consumer: normally a consumer will advance its offset linearly as it reads records, but, in fact, since the position is controlled by the consumer it can consume records in any order it likes. For example a consumer can reset to an older offset to reprocess data from the past or skip ahead to the most recent record and start consuming from "now".

Гарантии
^^^^^^^^^


Рекомендации по использованию
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
