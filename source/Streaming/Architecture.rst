Архитектурные особенности
--------------------------

Обзор
^^^^^^^

Разработанная компанией **Arenadata** платформа **ADS** имеет возможность выступать в качестве единой платформы для обработки всех потоков данных в реальном времени, которые может иметь крупная компания. С этой целью пришлось продумать достаточно широкий набор вариантов использования:

+ **ADS** должна иметь высокую пропускную способность для поддержки потоков событий большого объема, таких как агрегация журнала в режиме реального времени.
+ **ADS** должна грамотно справляться с большими объемами данных, чтобы иметь возможность поддерживать периодические загрузки данных из автономных систем.
+ **ADS** должна обрабатывать передачу данных с низкой задержкой с целью обработки большого количества традиционных случаев использования сообщений.

**Arenadata** хотела поддерживать секционированную, распределенную обработку в реальном времени для создания новых унаследованных лент. Это мотивировало партиционирование и потребительскую модель.

Наконец, в тех случаях, когда поток подается в сторонние системы данных для обслуживания, специалисты **Arenadata** знали, что система должна быть в состоянии гарантировать отказоустойчивость при наличии сбоев в работе машины.

Поддержка перечисленных критериев использования привела **Arenadata** к разработке с несколькими уникальными элементами, более похожими на журнал базы данных, чем на традиционную систему обмена сообщениями. 


Персистентность
^^^^^^^^^^^^^^^^

**ADS** в значительной степени опирается на файловую систему для хранения и кэширования сообщений. Существует общее представление о том, что "диски медленные", и это заставляет людей скептически относиться к тому, что персистентная структура может предложить конкурентоспособную производительность. На самом деле диски и намного медленнее и намного быстрее в зависимости от того, как они используются. И правильно разработанная структура диска часто может быть такой же быстрой, как и сеть.

Ключевым фактом о производительности диска является то, что пропускная способность жестких дисков отличается от латентности диска в течение последнего десятилетия. В результате производительность линейных записей в конфигурации **JBOD** с шестью массивами **SATA RAID-5** размером *7200 об/мин* составляет около *600 МБ/с*, но производительность случайной операции записи составляет всего около *100 к/сек* -- разница более *6000X*. Эти линейные операции чтения и записи являются наиболее предсказуемыми для всех моделей использования и сильно оптимизированы операционной системой. Современная ОС предоставляет технологии опережающего чтения и записи, которые обеспечивают предварительную выборку данных в больших кратных блоках и группируют меньшие логические записи в большие физические записи. Дальнейшее обсуждение этой проблемы можно найти в статье `ACM Queue <https://queue.acm.org/detail.cfm?id=1563874>`_, где они фактически находят, что последовательный доступ к диску может в некоторых случаях быть быстрее, чем случайный доступ к памяти.

Чтобы компенсировать расхождение в производительности, современные операционные системы становятся все более агрессивными в использовании основной памяти для кэширования диска. Современная ОС с радостью перенаправит всю свободную память на кэширование диска с небольшим снижением производительности при восстановлении памяти. Все операции чтения и записи на диск будут проходить через этот единый кэш. Данная функция не может быть легко отключена без использования прямого ввода-вывода, поэтому, даже если процесс поддерживает встроенный кэш данных, эти данные, вероятно, будут дублироваться в pagecache операционной системы, эффективно сохраняя все дважды.

Кроме того, платформа **ADS** строится поверх **JVM**, и каждый, кто проводил какое-либо время с использованием памяти **Java**, знает две вещи:

+ Накладные расходы памяти на объектах очень высоки, что часто удваивает размер хранимых данных;
+ Сбор мусора Java становится все более неудобным и медленным по мере увеличения объема данных in-heap.





Эффективность
^^^^^^^^^^^^^^


Поставщики данных
^^^^^^^^^^^^^^^^^^


Потребители данных
^^^^^^^^^^^^^^^^^^


Механизм доставки сообщений
^^^^^^^^^^^^^^^^^^^^^^^^^^^


Репликация
^^^^^^^^^^^


Сжатие журналов
^^^^^^^^^^^^^^^^
