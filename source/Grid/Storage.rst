Хранилище "ключ-значение"
-------------------------

**Репликация и секционирование данных в памяти кластера**

+ `Data Grid`_
+ `Запросы к данным в кэше`_
+ `Режимы работы кэша`_
+ `Основные и бекап копии`_


Data Grid
^^^^^^^^^

Платформа **Data Grid** была построена с нуля с концепцией горизонтального масштабирования и возможностью добавления узлов по требованию в режиме реального времени; платформа была разработана для линейного масштабирования до сотен узлов с сильной семантикой для маршрутизации данных с целью уменьшения избыточного шума данных.

**Data Grid** -- это *in-memory distributed key-value store* (распределенное хранилище ключей и значений в памяти), которое можно рассматривать как распределенную секционированную хэш-карту с каждым узлом кластера, владеющим частью общих данных. Таким образом, чем больше добавляется узлов кластера, тем больше данных можно кэшировать.

В отличие от других хранилищ "ключ-значение", **Grid** определяет местоположение данных с помощью алгоритма хэширования. Каждый клиент может определить, к какому узлу принадлежит ключ, подключив его к функции хэширования, без необходимости каких-либо mapping servers или name nodes.

**Data Grid** поддерживает локальные, реплицированные и секционированные наборы данных и позволяет свободно выполнять перекрестные запросы между этими наборами данных, используя стандартный синтаксис **SQL**. 

**Grid** поддерживает стандартный **SQL** для запросов данных, включая поддержку распределенных SQL-соединений.

**Data Grid** -- молниеносная платформа, являющаяся одной из самых быстрых по реализации транзакции данных в кластере сегодня.

**Data Grid** реализует спецификацию **JCache** (**JSR 107**).

.. important:: Пока кластер работает, Grid гарантирует, что данные между различными узлами кластера всегда будут оставаться неизменными независимо от сбоев или изменений топологии



Запросы к данным в кэше
^^^^^^^^^^^^^^^^^^^^^^^

**Grid** поддерживает очень элегантный **API** запросов с поддержкой Scan Queries на основе предикатов, запросов **SQL** (совместимых с **ANSI-99**) и текстовых запросов. Для SQL-запросов **Grid** поддерживает индексирование в памяти, поэтому все поисковые запросы чрезвычайно быстры.

**Grid** также обеспечивает поддержку пользовательской индексации с помощью классов *IndexingSpi* и *SpiQuery*.

*IgniteCache* имеет несколько методов запросов, все из которых получают некоторый подкласс класса *Query* и возвращают *QueryCursor*.

Абстрактный класс *Query* представляет собой абстрактный разбитый на страницы запрос для выполнения в распределенном кэше. Размер страницы можно задать с помощью метода *Query.setPageSize(...)*, значение по умолчанию которого - *1024*.



Режимы работы кэша
^^^^^^^^^^^^^^^^^^

Основные и бекап копии
^^^^^^^^^^^^^^^^^^^^^^
