Durable Memory
--------------

Durable Memory
^^^^^^^^^^^^^^

Ориентированная на память платформа **Arenadata Grid** основана на долговременной архитектуре памяти, которая позволяет хранить и обрабатывать данные и индексы как в памяти, так и на диске (при включенной функции `Grid Native Persistence`_). Архитектура Durable Memory помогает достичь функционирование памяти эффективней дисковой, используя все доступные ресурсы кластера.

Долговременная память **Grid** работает аналогично виртуальной памяти операционных систем (таких как **Linux**). Однако, одно существенное различие между этими двумя типами архитектуры заключается в том, что долговременная память при включенной персистентности всегда обрабатывает диск как надмножество данных, способное выдержать сбои и перезагрузки, в то время как традиционная виртуальная память использует диск только в качестве расширения места, которое очищается после завершения процесса.


Функции In-Memory
~~~~~~~~~~~~~~~~~

Поскольку архитектура ориентирована на память, оперативная память всегда рассматривается как первый уровень, где происходит вся обработка. Далее приведены характеристики и преимущества архитектуры в части in-memory:

+ **Off-heap Based** -- все данные и индексы хранятся вне **Java heap**, что позволяет легко обрабатывать петабайты данных, находящихся в кластере;
+ **Removes Noticeable Garbage Collection Pauses** -- поскольку все данные и индексы хранятся off-heap, код приложения является единственным возможным источником для длительных пауз;
+ **Предсказуемое использование памяти** -- по умолчанию долговременная память использует как можно больше RAM и дискового пространства. Тем не менее, можно легко настроить использование памяти в соответствии с необходимыми требованиями приложения;
+ **Автоматическая дефрагментация памяти** -- **Arenadata Grid** использует память как можно более эффективно и выполняет процедуры дефрагментации в фоновом режиме, избегая фрагментации;
+ **Повышенная производительность и использование памяти** -- все данные и индексы хранятся в постраничном формате с аналогичным представлением в памяти и на диске, что устраняет необходимость сериализации или десериализации данных.


Функции персистентности
~~~~~~~~~~~~~~~~~~~~~~~








Архитектура памяти
^^^^^^^^^^^^^^^^^^


Конфигурация памяти
^^^^^^^^^^^^^^^^^^^

