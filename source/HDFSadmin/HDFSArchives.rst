Архивы Hadoop
-------------

**Распределенная файловая система Hadoop** (**HDFS**) предназначена для хранения и обработки больших наборов данных, но при этом **HDFS** может быть менее эффективна при хранении большого количества мелких файлов. Когда в **HDFS** хранится много мелких файлов, они занимают большую часть пространства имен. В результате место на диске недоиспользуется из-за ограничения пространства имен.

**Архивы Hadoop** (**HAR**) используются для устранения ограничений пространства имен, связанных с хранением большого количества мелких файлов. **Архив Hadoop** позволяет упаковывать небольшие файлы в блоки **HDFS** более эффективно, тем самым сокращая использование памяти **NameNode**, сохраняя прозрачный доступ к файлам. **Архивы Hadoop** также совместимы с **MapReduce**, обеспечивая прозрачный доступ к исходным файлам с помощью заданий **MapReduce**.


Введение
^^^^^^^^

**HDFS** предназначена для хранения и обработки больших массивов данных (терабайт). Например, большой производственный кластер может иметь 14 ПБ дискового пространства и хранить 60 миллионов файлов.

Однако хранение большого количества мелких файлов в **HDFS** неэффективно. Обычно файл считается «маленьким», когда его размер существенно меньше размера блока **HDFS**, который по умолчанию равен 256 МБ в **ADH**. Файлы и блоки являются объектами имен в **HDFS**, что означает, что они занимают пространство имен (место в **NameNode**). Таким образом, емкость пространства имен системы ограничена физической памятью **NameNode**.

Когда в системе хранится много мелких файлов, они занимают большую часть пространства имен. Как следствие, дисковое пространство недоиспользуется из-за ограничения пространства имен. В одном реальном примере производственный кластер имел 57 миллионов файлов размером менее 256 МБ, при этом каждый из этих файлов занимал один блок в **NameNode**. Эти мелкие файлы использовали 95% пространства имен, но занимали только 30% дискового пространства кластера.

**HAR** могут использоваться для устранения ограничений пространства имен, связанных с хранением большого количества мелких файлов. **HAR** упаковывает несколько мелких файлов в большой, обеспечивая прозрачный доступ к исходным файлам (без расширения файлов).

**HAR** увеличивает масштабируемость системы за счет сокращения использования пространства имен и уменьшения нагрузки на работу в **NameNode**. Это улучшение оптимизирует память в **NameNode** и распределяет управление пространством имен по нескольким **NameNodes**.

**HAR** также совместим с **MapReduce**, он обеспечивает параллельный доступ к исходным файлам с помощью заданий **MapReduce**.





















