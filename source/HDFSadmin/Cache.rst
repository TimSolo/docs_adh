Централизованное управление кэшем в HDFS
----------------------------------------

В данной главе приведены инструкции по настройке и использованию централизованного управления кэшем в **HDFS**. 
Централизованное управление кэшем позволяет указать пути к каталогам или файлам, которые будут кэшироваться **HDFS**, 
тем самым повышая производительность приложений, которые неоднократно обращаются к одним и тем же данным.



Обзор
^^^^^

Централизованное управление кэшем в **HDFS** – это точный механизм кэширования, который позволяет указывать пути к каталогам или файлам, которые будут кэшироваться **HDFS**. **NameNode** связывается с **DataNodes**, которые имеют требуемые доступные на диске блоки, и поручает **DataNodes** кэшировать блоки в кэшах.

Централизованное управление кэшем в **HDFS** дает много существенных преимуществ:

+	Точный кэш предотвращает вытеснение часто используемых данных из памяти. Это особенно важно, когда размер рабочего набора превышает размер оперативной памяти, который является общим для многих рабочих нагрузок HDFS;
+	Поскольку кэши данных DataNode управляются NameNode, приложения могут запрашивать набор местоположений кэшированных блоков при принятии решений о размещении задач. Совмещение задачи с кэшированной блочной копией повышает производительность чтения;
+	Когда блок кэшируется с помощью DataNode, клиенты могут использовать новый, более эффективный API-интерфейс с нулевой копией. Поскольку проверка контрольных сумм кэшированных данных выполняется DataNode один раз, при использовании этого нового API клиенты могут понести практически нулевые расходы;
+	Централизованное кэширование может улучшить общую эффективность использования памяти кластера. Когда используется ОС буферного кэша на каждом DataNode, повторные чтения блока приводят к тому, что все *<n>* копии блока перемещаются в буферный кэш. При централизованном управлении кэшем точно указывается только *<m>* копий *<n>*, тем самым сохраняя память *<n-m>*.



Кэширование
^^^^^^^^^^^

Централизованное управление кэшем полезно:

+	Для файлов, к которым неоднократно обращаются. Например, небольшая таблица фактов в Hive, которая часто используется, является хорошим кандидатом для кэширования. И наоборот, кэширование запроса годовой отчетности менее полезно, так как подобные данные, вероятно, могут быть прочитаны только один раз;
+	Для смешанной рабочей нагрузки с SLA-производительностью. Кэширование рабочего набора высокоприоритетной рабочей нагрузки гарантирует, что она не конкурирует с низкоприоритетными рабочими нагрузками для дискового ввода-вывода. 



Архитектура кеширования
^^^^^^^^^^^^^^^^^^^^^^^

На рисунке показана централизованная кэшированная архитектура управления (:ref:`Рис.1.<hdfsadmin_pic1>`).

.. _hdfsadmin_pic1:

.. figure:: imgs/hdfsadmin_pic1.*
   :align: center
   
   Рис.1. Архитектура кэширования
   
   
В данной архитектуре **NameNode** отвечает за координацию всех кэш-файлов с неактивными данными в кластере. **NameNode** периодически получает кэш-отчет кэш от каждого **DataNode**. Кэш-отчет описывает все блоки, кэшированные в **DataNode**. **NameNode** управляет кэшами **DataNode** с помощью кеш-копий и мгновенных команд *uncache*.

**NameNode** запрашивает набор **Cache Directives**, чтобы определить, какие контуры следует кэшировать. **Cache Directives** постоянно сохраняются в *fsimage* и журналах и могут быть добавлены, удалены и изменены с помощью **Java** и API-интерфейсов командной строки. В **NameNode** также хранится набор **Cache Pools**, являющийся административным объектом, который группирует **Cache Directives** для управления ресурсами, а также для обеспечения прав доступа.

**NameNode** периодически повторно сканирует пространство имен и актив **Cache Directives**, чтобы определить, какие блоки нужно кэшировать, а какие нет, и назначает задачи кэширования **DataNodes**. Повторное сканирование также может быть вызвано действиями пользователя, такими как добавление или удаление **Cache Directives** или удаление **Cache Pools**.

Блоки кэша, находящиеся в стадии разрабобтки, поврежденые или неполные, не кэшируются. Если **Cache Directives** содержит ссылку, адрес ссылки не кэшируется.

В настоящее время кеширование может применяться только к каталогам и файлам.
























